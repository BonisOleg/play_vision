#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–±—ñ–Ω–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""

import os
import sys
import django
from decimal import Decimal
from datetime import datetime, timedelta

# –î–æ–¥–∞—Ç–∏ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
sys.path.append('/Users/olegbonislavskyi/Play_Vision')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'playvision.settings')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Django
django.setup()

from django.utils import timezone
from django.contrib.auth import get_user_model
from apps.loyalty.models import LoyaltyTier, LoyaltyAccount, PointTransaction
from apps.subscriptions.models import Plan, Subscription
from apps.content.models import Category, Course, Material, Tag, UserCourseProgress, Favorite
from apps.accounts.models import Profile

User = get_user_model()


def create_loyalty_tiers():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—ñ–≤–Ω—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ...")
    
    tiers_data = [
        {
            'name': 'Bronze',
            'points_required': 0,
            'discount_percentage': 0,
            'color': '#cd7f32',
            'benefits': ['–ë–∞–∑–æ–≤–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É'],
            'order': 1
        },
        {
            'name': 'Silver',
            'points_required': 200,
            'discount_percentage': 5,
            'color': '#c0c0c0',
            'benefits': ['5% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏', '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'],
            'order': 2
        },
        {
            'name': 'Gold',
            'points_required': 500,
            'discount_percentage': 10,
            'color': '#ffd700',
            'benefits': ['10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏', '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –≤–µ–±—ñ–Ω–∞—Ä–∏', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó'],
            'order': 3
        },
        {
            'name': 'Platinum',
            'points_required': 1000,
            'discount_percentage': 15,
            'color': '#e5e4e2',
            'benefits': ['15% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏', 'VIP –¥–æ—Å—Ç—É–ø –¥–æ —ñ–≤–µ–Ω—Ç—ñ–≤', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä', '–†–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø –¥–æ –Ω–æ–≤–∏–Ω–æ–∫'],
            'order': 4
        }
    ]

    for tier_data in tiers_data:
        tier, created = LoyaltyTier.objects.get_or_create(
            name=tier_data['name'],
            defaults=tier_data
        )
        if created:
            print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å: {tier.name}")
        else:
            print(f"  ‚ö†Ô∏è –†—ñ–≤–µ–Ω—å –≤–∂–µ —ñ—Å–Ω—É—î: {tier.name}")


def create_subscription_plans():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ–¥–ø–∏—Å–æ–∫...")
    
    plans_data = [
        {
            'name': '–ë–∞–∑–æ–≤–∏–π',
            'slug': 'basic',
            'duration': '1_month',
            'duration_months': 1,
            'price': Decimal('9.99'),
            'features': [
                '–î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö –∫—É—Ä—Å—ñ–≤',
                '–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫',
                'Email –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'
            ],
            'is_popular': False
        },
        {
            'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            'slug': 'standard',
            'duration': '1_month',
            'duration_months': 1,
            'price': Decimal('19.99'),
            'features': [
                '–î–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –∫—É—Ä—Å—ñ–≤',
                '–û—Ñ–ª–∞–π–Ω –ø–µ—Ä–µ–≥–ª—è–¥',
                '–ß–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
                '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏'
            ],
            'is_popular': True
        },
        {
            'name': '–ü—Ä–µ–º—ñ—É–º',
            'slug': 'premium',
            'duration': '1_month',
            'duration_months': 1,
            'price': Decimal('39.99'),
            'features': [
                '–í—Å–µ –∑ —Ç–∞—Ä–∏—Ñ—É –°—Ç–∞–Ω–¥–∞—Ä—Ç',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó',
                '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –≤–µ–±—ñ–Ω–∞—Ä–∏',
                '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'
            ],
            'is_popular': False
        }
    ]

    for plan_data in plans_data:
        plan, created = Plan.objects.get_or_create(
            slug=plan_data['slug'],
            defaults=plan_data
        )
        if created:
            print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–ª–∞–Ω: {plan.name}")
        else:
            print(f"  ‚ö†Ô∏è –ü–ª–∞–Ω –≤–∂–µ —ñ—Å–Ω—É—î: {plan.name}")


def create_content_structure():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Ç–µ–≥–∏"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–µ–≥—ñ–≤...")
    
    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories_data = [
        {'name': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', 'slug': 'analytics', 'icon': 'chart-bar'},
        {'name': '–¢—Ä–µ–Ω–µ—Ä—Å—Ç–≤–æ', 'slug': 'coaching', 'icon': 'users'},
        {'name': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è', 'slug': 'psychology', 'icon': 'brain'},
        {'name': '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è', 'slug': 'nutrition', 'icon': 'apple-alt'}
    ]

    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            slug=cat_data['slug'],
            defaults=cat_data
        )
        if created:
            print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category.name}")

    # –¢–µ–≥–∏
    tags_data = [
        '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', '–¢—Ä–µ–Ω–µ—Ä—Å—Ç–≤–æ', '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è',
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ú–æ—Ç–∏–≤–∞—Ü—ñ—è', '–°—Ç—Ä–µ—Å', '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è',
        '–ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞', '–õ—ñ–¥–µ—Ä—Å—Ç–≤–æ'
    ]

    for tag_name in tags_data:
        tag, created = Tag.objects.get_or_create(
            name=tag_name,
            defaults={'slug': tag_name.lower().replace(' ', '-')}
        )
        if created:
            print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–≥: {tag.name}")


def create_demo_user(email):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {email}")
    
    user, created = User.objects.get_or_create(
        email=email,
        defaults={
            'username': email,
            'first_name': '–î–µ–º–æ',
            'last_name': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
            'is_email_verified': True
        }
    )
    
    if created:
        user.set_password('demo123456')
        user.save()
        print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.email}")
        print(f"  üîë –ü–∞—Ä–æ–ª—å: demo123456")
    else:
        print(f"  ‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î: {user.email}")
    
    return user


def setup_user_profile(user):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
    
    profile, created = Profile.objects.get_or_create(
        user=user,
        defaults={
            'first_name': '–û–ª–µ–≥',
            'last_name': '–ë–æ–Ω–∏—Å–ª–∞–≤—Å—å–∫–∏–π',
            'birth_date': datetime(1990, 5, 15).date(),
            'profession': '–ê–Ω–∞–ª—ñ—Ç–∏–∫ / –¢—Ä–µ–Ω–µ—Ä',
            'completed_survey': True,
            'survey_completed_at': timezone.now()
        }
    )
    
    if created:
        # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∏
        tags = Tag.objects.filter(name__in=['–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', '–¢—Ä–µ–Ω–µ—Ä—Å—Ç–≤–æ', '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è'])
        profile.interests.set(tags)
        print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")


def create_user_subscription(user):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏...")
    
    plan = Plan.objects.filter(slug='standard').first()
    if not plan:
        print("  ‚ö†Ô∏è –ü–ª–∞–Ω 'standard' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    subscription, created = Subscription.objects.get_or_create(
        user=user,
        plan=plan,
        status='active',
        defaults={
            'start_date': timezone.now(),
            'end_date': timezone.now() + timedelta(days=30),
            'auto_renew': True
        }
    )
    
    if created:
        print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É: {plan.name}")


def setup_loyalty_account(user):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ"""
    print("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ...")
    
    try:
        loyalty_account = user.loyalty_account
        created = False
        print(f"  ‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –≤–∂–µ —ñ—Å–Ω—É—î")
    except LoyaltyAccount.DoesNotExist:
        silver_tier = LoyaltyTier.objects.filter(name='Silver').first()
        loyalty_account = LoyaltyAccount.objects.create(
            user=user,
            points=250,  # Silver —Ä—ñ–≤–µ–Ω—å
            lifetime_points=300,
            lifetime_spent=Decimal('89.99'),
            current_tier=silver_tier,
            tier_achieved_at=timezone.now()
        )
        created = True

    if created:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        transactions_data = [
            {'points': 50, 'reason': '–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é', 'days_ago': 30},
            {'points': 20, 'reason': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—É—Ä—Å—É "–ë–∞–∑–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞"', 'days_ago': 25},
            {'points': 100, 'reason': '–ü–æ–∫—É–ø–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏', 'days_ago': 20},
            {'points': 30, 'reason': '–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –≤–µ–±—ñ–Ω–∞—Ä—É', 'days_ago': 15},
            {'points': 25, 'reason': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—É—Ä—Å—É "–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Å–ø–æ—Ä—Ç—É"', 'days_ago': 10},
            {'points': 25, 'reason': '–†–µ—Ñ–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–∞', 'days_ago': 5}
        ]
        
        current_points = 0
        for trans_data in transactions_data:
            current_points += trans_data['points']
            PointTransaction.objects.create(
                account=loyalty_account,
                points=trans_data['points'],
                transaction_type='earned',
                reason=trans_data['reason'],
                balance_after=current_points,
                created_at=timezone.now() - timedelta(days=trans_data['days_ago'])
            )
        
        print(f"  ‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ: {loyalty_account.current_tier.name}")


def create_demo_courses(user):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫—É—Ä—Å–∏ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏"""
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫—É—Ä—Å—ñ–≤...")
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    analytics_cat = Category.objects.filter(slug='analytics').first()
    coaching_cat = Category.objects.filter(slug='coaching').first()
    psychology_cat = Category.objects.filter(slug='psychology').first()
    
    if not all([analytics_cat, coaching_cat, psychology_cat]):
        print("  ‚ö†Ô∏è –ù–µ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    courses_data = [
        {
            'title': '–ë–∞–∑–æ–≤–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞',
            'slug': 'basic-sports-analytics',
            'category': analytics_cat,
            'difficulty': 'beginner',
            'duration_minutes': 180,
            'price': Decimal('29.99'),
            'is_published': True,
            'materials': [
                {'title': '–í—Å—Ç—É–ø –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏', 'content_type': 'video', 'order': 1},
                {'title': '–û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏', 'content_type': 'pdf', 'order': 2},
                {'title': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É', 'content_type': 'video', 'order': 3},
                {'title': '–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è', 'content_type': 'article', 'order': 4}
            ]
        },
        {
            'title': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞',
            'slug': 'athlete-psychology',
            'category': psychology_cat,
            'difficulty': 'intermediate',
            'duration_minutes': 240,
            'price': Decimal('39.99'),
            'is_published': True,
            'materials': [
                {'title': '–û—Å–Ω–æ–≤–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ—ó –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó', 'content_type': 'video', 'order': 1},
                {'title': '–†–æ–±–æ—Ç–∞ –∑—ñ —Å—Ç—Ä–µ—Å–æ–º', 'content_type': 'pdf', 'order': 2},
                {'title': '–ú–æ—Ç–∏–≤–∞—Ü—ñ—è –∞—Ç–ª–µ—Ç—ñ–≤', 'content_type': 'video', 'order': 3}
            ]
        },
        {
            'title': '–°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
            'slug': 'modern-training-methods',
            'category': coaching_cat,
            'difficulty': 'advanced',
            'duration_minutes': 300,
            'price': Decimal('49.99'),
            'is_published': True,
            'materials': [
                {'title': '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å', 'content_type': 'video', 'order': 1},
                {'title': '–ú–µ—Ç–æ–¥–∏–∫–∏ —Ä–æ–∑–≤–∏—Ç–∫—É', 'content_type': 'pdf', 'order': 2}
            ]
        }
    ]

    for course_data in courses_data:
        materials_data = course_data.pop('materials', [])
        
        course, created = Course.objects.get_or_create(
            slug=course_data['slug'],
            defaults={
                **course_data,
                'description': f'–û–ø–∏—Å –∫—É—Ä—Å—É: {course_data["title"]}',
                'short_description': f'–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –¥–ª—è {course_data["title"]}',
                'published_at': timezone.now()
            }
        )
        
        if created:
            print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫—É—Ä—Å: {course.title}")
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
            for material_data in materials_data:
                Material.objects.create(
                    course=course,
                    **material_data,
                    slug=material_data['title'].lower().replace(' ', '-'),
                    video_duration_seconds=300 if material_data['content_type'] == 'video' else 0
                )
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            progress = UserCourseProgress.objects.create(
                user=user,
                course=course,
                progress_percentage=75 if course_data['slug'] == 'basic-sports-analytics' else 30
            )
            
            # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –¥–µ—è–∫—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
            if course_data['slug'] == 'basic-sports-analytics':
                completed_materials = course.materials.all()[:3]
                progress.materials_completed.set(completed_materials)
                progress.update_progress()
            
            # –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö
            if course_data['slug'] in ['basic-sports-analytics', 'athlete-psychology']:
                Favorite.objects.create(user=user, course=course)

    print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–µ–º–æ –∫—É—Ä—Å–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
    print("=" * 50)
    
    email = 'demo@playvision.com'
    
    # 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—ñ–≤–Ω—ñ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    create_loyalty_tiers()
    
    # 2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–æ–∫
    create_subscription_plans()
    
    # 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —Ç–µ–≥–∏
    create_content_structure()
    
    # 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = create_demo_user(email)
    
    # 5. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
    setup_user_profile(user)
    
    # 6. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
    create_user_subscription(user)
    
    # 7. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    setup_loyalty_account(user)
    
    # 8. –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫—É—Ä—Å–∏ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
    create_demo_courses(user)
    
    print("=" * 50)
    print("‚úÖ –î–µ–º–æ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    print(f"üîó Email: {email}")
    print("üîë –ü–∞—Ä–æ–ª—å: demo123456")
    print("üåê –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ /account/")


if __name__ == '__main__':
    main()
