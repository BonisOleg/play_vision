/**
 * INLINE AI CHAT IN HEADER
 * –ü–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ —á–∞—Ç—É –≤ —Ö–µ–¥–µ—Ä—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
 */

(function () {
    'use strict';

    // ========================================
    // CONFIGURATION
    // ========================================

    const CONFIG = {
        maxHeight: '50vh',  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ —á–∞—Ç—É
        animationDuration: 300,
        detachedModalWidth: 400,
        detachedModalMinHeight: 200,
        detachedModalDefaultHeight: 500,
        resizeMinHeight: 200,
        resizeMaxHeight: null  // –ë—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ (50% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω—É)
    };

    // ========================================
    // STATE
    // ========================================

    let state = {
        isDetached: false,
        hasMessages: false,
        chatHistory: [],
        modal: null,
        modalPosition: { x: 100, y: 100 },
        modalHeight: CONFIG.detachedModalDefaultHeight,
        isDragging: false,
        isResizing: false,
        dragOffset: { x: 0, y: 0 }
    };

    // ========================================
    // DOM ELEMENTS
    // ========================================

    const elements = {
        inline: document.querySelector('[data-ai-chat-inline]'),
        messages: document.querySelector('[data-ai-messages]'),
        input: document.querySelector('[data-ai-input]'),
        sendBtn: document.querySelector('[data-ai-send]'),
        detachBtn: document.querySelector('[data-ai-detach]')
    };

    // ========================================
    // INITIALIZATION
    // ========================================

    function init() {
        if (!elements.inline) return;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É –¥–ª—è resize
        CONFIG.resizeMaxHeight = window.innerHeight * 0.5;

        // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        bindEvents();

        console.log('‚úÖ AI Chat Inline initialized');
    }

    // ========================================
    // EVENT HANDLERS
    // ========================================

    function bindEvents() {
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (elements.sendBtn) {
            elements.sendBtn.addEventListener('click', handleSendMessage);
        }

        if (elements.input) {
            elements.input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                }
            });
        }

        // –í—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —á–∞—Ç—É
        if (elements.detachBtn) {
            elements.detachBtn.addEventListener('click', handleDetachChat);
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –≤–∏—Å–æ—Ç–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        window.addEventListener('resize', handleWindowResize);
    }

    // ========================================
    // MESSAGE HANDLING
    // ========================================

    function handleSendMessage() {
        const message = elements.input.value.trim();

        if (!message) return;

        console.log('üì® Sending message:', message);

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –ü–ï–†–ï–î –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (!state.hasMessages) {
            showChatHistory();
        }

        // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        addMessage(message, 'user');

        // –û—á–∏—â–∞—î–º–æ input
        elements.input.value = '';

        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
        if (elements.detachBtn) {
            elements.detachBtn.style.display = 'flex';
        }

        // –°–∏–º—É–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI (–∑–∞–º—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
        setTimeout(() => {
            const aiResponse = '–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –Ø AI –ø–æ–º—ñ—á–Ω–∏–∫ Play Vision. –ù–∞—Ä–∞–∑—ñ –ø—Ä–∞—Ü—é—é –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.';
            addMessage(aiResponse, 'bot');
        }, 1000);
    }

    function addMessage(text, sender) {
        const messageEl = document.createElement('div');
        messageEl.className = `ai-message ai-message--${sender}`;

        const avatar = document.createElement('div');
        avatar.className = 'ai-message-avatar';
        avatar.textContent = sender === 'user' ? 'üë§' : 'ü§ñ';

        const content = document.createElement('div');
        content.className = 'ai-message-content';
        const p = document.createElement('p');
        p.textContent = text;
        content.appendChild(p);

        messageEl.appendChild(avatar);
        messageEl.appendChild(content);

        // –î–æ–¥–∞—î–º–æ –¥–æ history
        state.chatHistory.push({ text, sender, element: messageEl });

        // –î–æ–¥–∞—î–º–æ –¥–æ DOM
        const container = state.isDetached
            ? document.querySelector('.ai-chat-modal-messages')
            : elements.messages;

        if (container) {
            console.log('‚úÖ Adding message to container', container);
            container.appendChild(messageEl);
            // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑
            setTimeout(() => {
                container.scrollTop = container.scrollHeight;
            }, 10);
        } else {
            console.error('‚ùå Container not found!');
        }

        state.hasMessages = true;
    }

    function showChatHistory() {
        if (!elements.messages) return;

        elements.messages.style.display = 'flex';

        // –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –í–ì–û–†–£
        requestAnimationFrame(() => {
            elements.messages.style.opacity = '0';
            elements.messages.style.transform = 'translateY(10px)';

            requestAnimationFrame(() => {
                elements.messages.style.transition = `opacity ${CONFIG.animationDuration}ms ease, transform ${CONFIG.animationDuration}ms ease`;
                elements.messages.style.opacity = '1';
                elements.messages.style.transform = 'translateY(0)';
            });
        });
    }

    function hideChatHistory() {
        if (!elements.messages) return;

        elements.messages.style.opacity = '0';
        elements.messages.style.transform = 'translateY(10px)';

        setTimeout(() => {
            elements.messages.style.display = 'none';
            elements.messages.style.transform = 'translateY(0)';
        }, CONFIG.animationDuration);
    }

    // ========================================
    // DETACH/ATTACH LOGIC
    // ========================================

    function handleDetachChat() {
        if (state.isDetached) {
            attachChat();
        } else {
            detachChat();
        }
    }

    function detachChat() {
        state.isDetached = true;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        createModal();

        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤–µ—Å—å inline —á–∞—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (elements.inline) {
            elements.inline.style.display = 'none';
        }

        // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–æ–¥–∞–ª–∫—É
        transferMessagesToModal();

        console.log('üîì Chat detached');
    }

    function attachChat() {
        state.isDetached = false;

        // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –≤ inline
        transferMessagesToInline();

        // –í–∏–¥–∞–ª—è—î–º–æ –º–æ–¥–∞–ª–∫—É
        if (state.modal) {
            state.modal.remove();
            state.modal = null;
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –≤–µ—Å—å inline —á–∞—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (elements.inline) {
            elements.inline.style.display = 'flex';
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —è–∫—â–æ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (elements.messages && state.hasMessages) {
            elements.messages.style.display = 'flex';
        }

        console.log('üìå Chat attached');
    }

    // ========================================
    // MODAL CREATION
    // ========================================

    function createModal() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'ai-chat-modal';
        modal.style.left = `${state.modalPosition.x}px`;
        modal.style.top = `${state.modalPosition.y}px`;
        modal.style.width = `${CONFIG.detachedModalWidth}px`;
        modal.style.height = `${state.modalHeight}px`;
        modal.style.maxHeight = CONFIG.maxHeight;

        // Header –∑ drag handle
        const header = document.createElement('div');
        header.className = 'ai-chat-modal-header';

        const title = document.createElement('h3');
        title.className = 'ai-chat-modal-title';
        title.textContent = 'AI –ü–æ–º—ñ—á–Ω–∏–∫';

        const closeBtn = document.createElement('button');
        closeBtn.className = 'ai-chat-modal-close';
        closeBtn.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
        `;
        closeBtn.addEventListener('click', () => attachChat());

        header.appendChild(title);
        header.appendChild(closeBtn);

        // Messages container
        const messagesContainer = document.createElement('div');
        messagesContainer.className = 'ai-chat-modal-messages';

        // Input wrapper
        const inputWrapper = document.createElement('div');
        inputWrapper.className = 'ai-chat-modal-input-wrapper';

        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'ai-chat-modal-input';
        input.placeholder = '–ó–∞–ø–∏—Ç–∞–π—Ç–µ AI –ø–æ–º—ñ—á–Ω–∏–∫–∞...';

        const sendBtn = document.createElement('button');
        sendBtn.className = 'ai-chat-modal-send';
        sendBtn.innerHTML = `
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="22" y1="2" x2="11" y2="13" />
                <polygon points="22,2 15,22 11,13 2,9" />
            </svg>
        `;

        inputWrapper.appendChild(input);
        inputWrapper.appendChild(sendBtn);

        // Resize handle
        const resizeHandle = document.createElement('div');
        resizeHandle.className = 'ai-chat-modal-resize';

        // –°–∫–ª–∞–¥–∞—î–º–æ –º–æ–¥–∞–ª–∫—É
        modal.appendChild(header);
        modal.appendChild(messagesContainer);
        modal.appendChild(inputWrapper);
        modal.appendChild(resizeHandle);

        // –î–æ–¥–∞—î–º–æ –≤ DOM
        document.body.appendChild(modal);
        state.modal = modal;

        // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        bindModalEvents(modal, header, input, sendBtn, resizeHandle);
    }

    function bindModalEvents(modal, header, input, sendBtn, resizeHandle) {
        // Drag
        header.addEventListener('mousedown', (e) => startDrag(e, modal));

        // Send message
        sendBtn.addEventListener('click', () => {
            handleModalSendMessage(input);
        });

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleModalSendMessage(input);
            }
        });

        // Resize
        resizeHandle.addEventListener('mousedown', (e) => startResize(e, modal));
    }

    function handleModalSendMessage(input) {
        const message = input.value.trim();

        if (!message) return;

        addMessage(message, 'user');
        input.value = '';

        // –°–∏–º—É–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        setTimeout(() => {
            const aiResponse = '–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –Ø AI –ø–æ–º—ñ—á–Ω–∏–∫ Play Vision.';
            addMessage(aiResponse, 'bot');
        }, 1000);
    }

    // ========================================
    // DRAG AND DROP
    // ========================================

    function startDrag(e, modal) {
        if (e.target.closest('.ai-chat-modal-close')) return;

        state.isDragging = true;
        state.dragOffset.x = e.clientX - state.modalPosition.x;
        state.dragOffset.y = e.clientY - state.modalPosition.y;

        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', stopDrag);

        modal.style.cursor = 'grabbing';
        e.preventDefault();
    }

    function drag(e) {
        if (!state.isDragging) return;

        state.modalPosition.x = e.clientX - state.dragOffset.x;
        state.modalPosition.y = e.clientY - state.dragOffset.y;

        // –û–±–º–µ–∂—É—î–º–æ –≤ –º–µ–∂–∞—Ö –≤—ñ–∫–Ω–∞
        state.modalPosition.x = Math.max(0, Math.min(state.modalPosition.x, window.innerWidth - CONFIG.detachedModalWidth));
        state.modalPosition.y = Math.max(0, Math.min(state.modalPosition.y, window.innerHeight - 100));

        if (state.modal) {
            state.modal.style.left = `${state.modalPosition.x}px`;
            state.modal.style.top = `${state.modalPosition.y}px`;
        }
    }

    function stopDrag() {
        state.isDragging = false;
        document.removeEventListener('mousemove', drag);
        document.removeEventListener('mouseup', stopDrag);

        if (state.modal) {
            state.modal.style.cursor = '';
        }
    }

    // ========================================
    // RESIZE
    // ========================================

    function startResize(e, modal) {
        state.isResizing = true;
        state.initialHeight = modal.offsetHeight;
        state.initialY = e.clientY;

        document.addEventListener('mousemove', resize);
        document.addEventListener('mouseup', stopResize);

        e.preventDefault();
    }

    function resize(e) {
        if (!state.isResizing) return;

        const deltaY = e.clientY - state.initialY;
        let newHeight = state.initialHeight + deltaY;

        // –û–±–º–µ–∂—É—î–º–æ –≤–∏—Å–æ—Ç—É
        newHeight = Math.max(CONFIG.resizeMinHeight, newHeight);
        newHeight = Math.min(CONFIG.resizeMaxHeight, newHeight);

        state.modalHeight = newHeight;

        if (state.modal) {
            state.modal.style.height = `${newHeight}px`;
        }
    }

    function stopResize() {
        state.isResizing = false;
        document.removeEventListener('mousemove', resize);
        document.removeEventListener('mouseup', stopResize);
    }

    // ========================================
    // MESSAGE TRANSFER
    // ========================================

    function transferMessagesToModal() {
        if (!state.modal) return;

        const modalMessages = state.modal.querySelector('.ai-chat-modal-messages');
        if (!modalMessages) return;

        // –û—á–∏—â–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        modalMessages.innerHTML = '';

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        state.chatHistory.forEach(msg => {
            const clone = msg.element.cloneNode(true);
            modalMessages.appendChild(clone);
        });

        // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑
        modalMessages.scrollTop = modalMessages.scrollHeight;
    }

    function transferMessagesToInline() {
        if (!elements.messages) return;

        // –û—á–∏—â–∞—î–º–æ inline –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        elements.messages.innerHTML = '';

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
        state.chatHistory.forEach(msg => {
            const clone = msg.element.cloneNode(true);
            elements.messages.appendChild(clone);
        });

        // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–Ω–∏–∑
        elements.messages.scrollTop = elements.messages.scrollHeight;
    }

    // ========================================
    // WINDOW RESIZE
    // ========================================

    function handleWindowResize() {
        // –û–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É
        CONFIG.resizeMaxHeight = window.innerHeight * 0.5;

        // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –º–æ–¥–∞–ª–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ
        if (state.isDetached && state.modal) {
            state.modalPosition.x = Math.max(0, Math.min(state.modalPosition.x, window.innerWidth - CONFIG.detachedModalWidth));
            state.modalPosition.y = Math.max(0, Math.min(state.modalPosition.y, window.innerHeight - 100));

            state.modal.style.left = `${state.modalPosition.x}px`;
            state.modal.style.top = `${state.modalPosition.y}px`;

            // –ö–æ—Ä–∏–≥—É—î–º–æ –≤–∏—Å–æ—Ç—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (state.modalHeight > CONFIG.resizeMaxHeight) {
                state.modalHeight = CONFIG.resizeMaxHeight;
                state.modal.style.height = `${state.modalHeight}px`;
            }
        }
    }

    // ========================================
    // START
    // ========================================

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();

