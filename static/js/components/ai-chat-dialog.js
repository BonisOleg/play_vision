/**
 * AI Chat Dialog Component
 * –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ç–∞ —Ä–æ–±–æ—Ç–æ—é AI —á–∞—Ç—É –≤ header
 * –ë–ï–ó globals, –ë–ï–ó eval, –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –º–æ–¥—É–ª—å–Ω–∏–π JS
 */

(function () {
    'use strict';

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    const CLASS_DIALOG_OPEN = 'dialog-open';
    const STORAGE_KEY = 'ai-chat-history';
    const API_URL = '/ai/ask/';
    const MAX_HISTORY_MESSAGES = 20;

    // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
    let toggleBtn = null;
    let dialog = null;
    let overlay = null;
    let closeButtons = null;
    let messagesContainer = null;
    let form = null;
    let input = null;
    let sendBtn = null;
    let charCounter = null;

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    function init() {
        // –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ DOM
        toggleBtn = document.querySelector('[data-ai-chat-toggle]');
        dialog = document.querySelector('[data-ai-chat-dialog]');
        overlay = document.querySelector('[data-ai-dialog-overlay]');
        closeButtons = document.querySelectorAll('[data-ai-dialog-close]');
        messagesContainer = document.querySelector('[data-ai-dialog-messages]');
        form = document.querySelector('[data-ai-dialog-form]');
        input = document.querySelector('[data-ai-dialog-input]');
        sendBtn = document.querySelector('[data-ai-dialog-send]');
        charCounter = document.querySelector('[data-ai-char-counter]');

        if (!toggleBtn || !dialog) {
            return;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ event listeners
        toggleBtn.addEventListener('click', toggleDialog);
        
        closeButtons.forEach(function (btn) {
            btn.addEventListener('click', closeDialog);
        });

        if (overlay) {
            overlay.addEventListener('click', closeDialog);
        }

        if (form) {
            form.addEventListener('submit', handleSubmit);
        }

        if (input) {
            input.addEventListener('input', handleInputChange);
            input.addEventListener('keydown', handleKeyDown);
        }

        // –ó–∞–∫—Ä–∏—Ç–∏ –Ω–∞ Escape
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape' && dialog.classList.contains(CLASS_DIALOG_OPEN)) {
                closeDialog();
            }
        });

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É
        loadChatHistory();
    }

    /**
     * Toggle dialog –≤—ñ–¥–∫—Ä–∏—Ç–æ/–∑–∞–∫—Ä–∏—Ç–æ
     */
    function toggleDialog() {
        if (dialog.classList.contains(CLASS_DIALOG_OPEN)) {
            closeDialog();
        } else {
            openDialog();
        }
    }

    /**
     * –í—ñ–¥–∫—Ä–∏—Ç–∏ dialog
     */
    function openDialog() {
        dialog.classList.add(CLASS_DIALOG_OPEN);
        dialog.setAttribute('aria-hidden', 'false');
        
        // Focus –Ω–∞ input
        if (input) {
            setTimeout(function () {
                input.focus();
            }, 100);
        }

        // Scroll –¥–æ –Ω–∏–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        scrollToBottom();
    }

    /**
     * –ó–∞–∫—Ä–∏—Ç–∏ dialog
     */
    function closeDialog() {
        dialog.classList.remove(CLASS_DIALOG_OPEN);
        dialog.setAttribute('aria-hidden', 'true');
        
        // Focus –Ω–∞–∑–∞–¥ –Ω–∞ toggle button
        if (toggleBtn) {
            toggleBtn.focus();
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ submit —Ñ–æ—Ä–º–∏
     */
    function handleSubmit(e) {
        e.preventDefault();

        if (!input) {
            return;
        }

        const query = input.value.trim();

        if (!query) {
            return;
        }

        if (query.length > 500) {
            showError('–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤)');
            return;
        }

        // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        displayMessage(query, 'user');

        // –û—á–∏—Å—Ç–∏—Ç–∏ input
        input.value = '';
        updateCharCounter();
        autoResizeTextarea();

        // –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showLoading();

        // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ API
        sendQuery(query);
    }

    /**
     * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ AI API
     */
    function sendQuery(query) {
        const csrfToken = getCSRFToken();

        fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrfToken
            },
            body: JSON.stringify({ query: query })
        })
        .then(function (response) {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(function (data) {
            hideLoading();

            if (data.success && data.response) {
                displayMessage(data.response, 'bot');
                saveChatHistory();
            } else {
                showError(data.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            }
        })
        .catch(function (error) {
            hideLoading();
            console.error('AI Chat Error:', error);
            showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        });
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
     */
    function displayMessage(text, type) {
        if (!messagesContainer) {
            return;
        }

        const messageEl = document.createElement('div');
        messageEl.className = 'ai-message ai-message--' + type;

        const avatarEl = document.createElement('div');
        avatarEl.className = 'ai-message-avatar';
        avatarEl.textContent = type === 'bot' ? 'ü§ñ' : 'üë§';

        const contentEl = document.createElement('div');
        contentEl.className = 'ai-message-content';
        
        const p = document.createElement('p');
        p.textContent = text;
        contentEl.appendChild(p);

        messageEl.appendChild(avatarEl);
        messageEl.appendChild(contentEl);

        messagesContainer.appendChild(messageEl);

        scrollToBottom();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function showLoading() {
        if (!messagesContainer) {
            return;
        }

        const loadingEl = document.createElement('div');
        loadingEl.className = 'ai-message ai-message--bot';
        loadingEl.setAttribute('data-loading', 'true');

        const avatarEl = document.createElement('div');
        avatarEl.className = 'ai-message-avatar';
        avatarEl.textContent = 'ü§ñ';

        const contentEl = document.createElement('div');
        contentEl.className = 'ai-message-content';
        
        const loadingDots = document.createElement('div');
        loadingDots.className = 'ai-message-loading';
        for (let i = 0; i < 3; i++) {
            const dot = document.createElement('span');
            dot.className = 'ai-loading-dot';
            loadingDots.appendChild(dot);
        }
        contentEl.appendChild(loadingDots);

        loadingEl.appendChild(avatarEl);
        loadingEl.appendChild(contentEl);

        messagesContainer.appendChild(loadingEl);
        scrollToBottom();

        // Disable send button
        if (sendBtn) {
            sendBtn.disabled = true;
        }
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    function hideLoading() {
        if (!messagesContainer) {
            return;
        }

        const loadingEl = messagesContainer.querySelector('[data-loading="true"]');
        if (loadingEl) {
            loadingEl.remove();
        }

        // Enable send button
        if (sendBtn) {
            sendBtn.disabled = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
     */
    function showError(message) {
        if (!messagesContainer) {
            return;
        }

        const errorEl = document.createElement('div');
        errorEl.className = 'ai-message-error';
        errorEl.textContent = '‚ö†Ô∏è ' + message;

        messagesContainer.appendChild(errorEl);
        scrollToBottom();
    }

    /**
     * Scroll –¥–æ –Ω–∏–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     */
    function scrollToBottom() {
        if (!messagesContainer) {
            return;
        }

        setTimeout(function () {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }, 50);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ input
     */
    function handleInputChange() {
        updateCharCounter();
        autoResizeTextarea();
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∏–º–≤–æ–ª—ñ–≤
     */
    function updateCharCounter() {
        if (!input || !charCounter) {
            return;
        }

        const length = input.value.length;
        charCounter.textContent = length;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É textarea
     */
    function autoResizeTextarea() {
        if (!input) {
            return;
        }

        input.style.height = 'auto';
        input.style.height = Math.min(input.scrollHeight, 120) + 'px';
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
     */
    function handleKeyDown(e) {
        // Enter –±–µ–∑ Shift - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            if (form) {
                form.dispatchEvent(new Event('submit', { cancelable: true }));
            }
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ CSRF —Ç–æ–∫–µ–Ω
     */
    function getCSRFToken() {
        const csrfInput = document.querySelector('[name="csrfmiddlewaretoken"]');
        if (csrfInput) {
            return csrfInput.value;
        }

        // Fallback - –∑ cookie
        const cookieValue = document.cookie
            .split('; ')
            .find(function (row) { return row.startsWith('csrftoken='); });
        
        return cookieValue ? cookieValue.split('=')[1] : '';
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∑ sessionStorage
     */
    function loadChatHistory() {
        try {
            const history = sessionStorage.getItem(STORAGE_KEY);
            if (!history) {
                return;
            }

            const messages = JSON.parse(history);
            if (!Array.isArray(messages)) {
                return;
            }

            // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫—Ä—ñ–º –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ)
            messages.forEach(function (msg) {
                if (msg.text && msg.type) {
                    displayMessage(msg.text, msg.type);
                }
            });
        } catch (e) {
            console.warn('Failed to load chat history:', e);
        }
    }

    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –≤ sessionStorage
     */
    function saveChatHistory() {
        if (!messagesContainer) {
            return;
        }

        try {
            const messages = [];
            const messageElements = messagesContainer.querySelectorAll('.ai-message:not([data-loading])');

            // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            for (let i = 1; i < messageElements.length && i <= MAX_HISTORY_MESSAGES; i++) {
                const msgEl = messageElements[i];
                const isUser = msgEl.classList.contains('ai-message--user');
                const contentEl = msgEl.querySelector('.ai-message-content p');
                
                if (contentEl) {
                    messages.push({
                        text: contentEl.textContent,
                        type: isUser ? 'user' : 'bot'
                    });
                }
            }

            sessionStorage.setItem(STORAGE_KEY, JSON.stringify(messages));
        } catch (e) {
            console.warn('Failed to save chat history:', e);
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();

