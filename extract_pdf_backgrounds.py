#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ PDF —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ —Ñ–æ–Ω–∏.

–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
    python extract_pdf_backgrounds.py

–í–ò–•–Ü–î–ù–Ü –§–ê–ô–õ–ò:
    - static/images/pdf-backgrounds/*.png - –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    - static/css/pdf-backgrounds.css - –≥–æ—Ç–æ–≤—ñ CSS –∫–ª–∞—Å–∏
    - static/images/pdf-backgrounds/manifest.json - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

–ó–ê–õ–ï–ñ–ù–û–°–¢–Ü:
    pip install PyMuPDF Pillow

–ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –í –ö–û–î–Ü:
    HTML:
        <div class="bg-02-backpack-black-1">–ö–æ–Ω—Ç–µ–Ω—Ç</div>
    
    CSS:
        background-image: url('/static/images/pdf-backgrounds/pattern_page1.png');
"""
import fitz  # PyMuPDF
from pathlib import Path
from PIL import Image
import json
import sys


class PDFBackgroundExtractor:
    def __init__(self, pdf_dir: str, output_dir: str, dpi: int = 150):
        self.pdf_dir = Path(pdf_dir)
        self.output_dir = Path(output_dir)
        self.dpi = dpi
        self.zoom = dpi / 72  # PDF default DPI is 72
        self.manifest = {}
        
    def extract_from_pdf(self, pdf_path: Path, optimize: bool = True):
        """–í–∏—Ç—è–≥—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ PDF —Ñ–∞–π–ª—É."""
        doc = fitz.open(pdf_path)
        pdf_name = pdf_path.stem
        images = []
        
        print(f"\nüìÑ –û–±—Ä–æ–±–∫–∞: {pdf_path.name}")
        
        for page_num in range(len(doc)):
            page = doc[page_num]
            
            # –†–µ–Ω–¥–µ—Ä–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            matrix = fitz.Matrix(self.zoom, self.zoom)
            pix = page.get_pixmap(matrix=matrix, alpha=False)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ PNG
            output_name = f"{pdf_name}_page{page_num + 1}.png"
            output_path = self.output_dir / output_name
            pix.save(str(output_path))
            
            # –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if optimize:
                self._optimize_image(output_path)
            
            img_info = {
                "original_pdf": str(pdf_path.relative_to(self.pdf_dir.parent)),
                "page": page_num + 1,
                "width": pix.width,
                "height": pix.height,
                "css_class": self._generate_css_class(pdf_name, page_num + 1)
            }
            images.append(output_name)
            self.manifest[output_name] = img_info
            
            print(f"  ‚úì –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page_num + 1} ‚Üí {output_name} ({pix.width}√ó{pix.height})")
        
        doc.close()
        return images
    
    def _optimize_image(self, image_path: Path, max_width: int = 1920):
        """–û–ø—Ç–∏–º—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–µ–±."""
        try:
            img = Image.open(image_path)
            
            # –ó–º–µ–Ω—à—É—î–º–æ —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ
            if img.width > max_width:
                ratio = max_width / img.width
                new_height = int(img.height * ratio)
                img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
            img.save(image_path, optimize=True, quality=85)
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    def _generate_css_class(self, base_name: str, page: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î CSS –∫–ª–∞—Å –¥–ª—è background."""
        clean_name = base_name.replace('_', '-').replace(' ', '-').lower()
        return f"bg-{clean_name}-{page}"
    
    def process_directory(self, recursive: bool = True):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ PDF –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
        pattern = "**/*.pdf" if recursive else "*.pdf"
        pdf_files = list(self.pdf_dir.glob(pattern))
        
        if not pdf_files:
            print(f"‚ùå PDF —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ {self.pdf_dir}")
            return
        
        print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª—ñ–≤")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        total_images = 0
        for pdf_path in sorted(pdf_files):
            try:
                images = self.extract_from_pdf(pdf_path)
                total_images += len(images)
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∏—Ç—è–≥–Ω—É—Ç–æ {total_images} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        return total_images
    
    def generate_css(self, css_path: Path):
        """–ì–µ–Ω–µ—Ä—É—î CSS —Ñ–∞–π–ª –∑ –∫–ª–∞—Å–∞–º–∏ –¥–ª—è —Ñ–æ–Ω—ñ–≤."""
        css_lines = [
            "/* –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∫–ª–∞—Å–∏ –¥–ª—è PDF —Ñ–æ–Ω—ñ–≤ */",
            "/* –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <div class='bg-–Ω–∞–∑–≤–∞–Ω–∏–µ'></div> */\n"
        ]
        
        for img_name, info in self.manifest.items():
            css_class = info['css_class']
            img_url = f"/static/images/pdf-backgrounds/{img_name}"
            
            css_lines.append(f".{css_class} {{")
            css_lines.append(f"  background-image: url('{img_url}');")
            css_lines.append("  background-size: cover;")
            css_lines.append("  background-position: center;")
            css_lines.append("  background-repeat: no-repeat;")
            css_lines.append(f"  /* {info['width']}√ó{info['height']}px */")
            css_lines.append("}\n")
        
        css_path.parent.mkdir(parents=True, exist_ok=True)
        css_path.write_text("\n".join(css_lines), encoding="utf-8")
        print(f"üìù CSS –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {css_path}")
    
    def save_manifest(self, manifest_path: Path):
        """–ó–±–µ—Ä—ñ–≥–∞—î –º–∞–Ω—ñ—Ñ–µ—Å—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
        manifest_path.parent.mkdir(parents=True, exist_ok=True)
        manifest_path.write_text(
            json.dumps(self.manifest, indent=2, ensure_ascii=False),
            encoding="utf-8"
        )
        print(f"üìã –ú–∞–Ω—ñ—Ñ–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {manifest_path}")


def main():
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    BASE_DIR = Path(__file__).parent
    PDF_DIR = BASE_DIR / "static" / "guideline"
    OUTPUT_DIR = BASE_DIR / "static" / "images" / "pdf-backgrounds"
    CSS_FILE = BASE_DIR / "static" / "css" / "pdf-backgrounds.css"
    MANIFEST_FILE = OUTPUT_DIR / "manifest.json"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    DPI = 150  # –Ø–∫—ñ—Å—Ç—å (72-–Ω–∏–∑—å–∫–∞, 150-—Å–µ—Ä–µ–¥–Ω—è, 300-–≤–∏—Å–æ–∫–∞)
    
    print("=" * 60)
    print("PDF Background Extractor –¥–ª—è Play Vision")
    print("=" * 60)
    
    extractor = PDFBackgroundExtractor(
        pdf_dir=str(PDF_DIR),
        output_dir=str(OUTPUT_DIR),
        dpi=DPI
    )
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ PDF
    total = extractor.process_directory(recursive=True)
    
    if total:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ CSS
        extractor.generate_css(CSS_FILE)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–Ω—ñ—Ñ–µ—Å—Ç
        extractor.save_manifest(MANIFEST_FILE)
        
        print("\n" + "=" * 60)
        print("üìö –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:")
        print("=" * 60)
        print("1. –î–æ–¥–∞–π –≤ base.html:")
        print('   <link rel="stylesheet" href="{% static \'css/pdf-backgrounds.css\' %}">')
        print("\n2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–ª–∞—Å–∏:")
        print('   <div class="bg-backpack-black-1"></div>')
        print("\n3. –ê–±–æ –Ω–∞–ø—Ä—è–º—É:")
        print('   background-image: url("/static/images/pdf-backgrounds/...")');
        print("\n4. –ü–æ–¥–∏–≤–∏—Å—å manifest.json –¥–ª—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print("=" * 60)


if __name__ == "__main__":
    main()

