# Generated by Django 5.1.6 on 2025-09-06 16:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='CSS class or SVG icon', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(max_length=300)),
                ('difficulty', models.CharField(choices=[('beginner', 'Початковий'), ('intermediate', 'Середній'), ('advanced', 'Експертний')], max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_free', models.BooleanField(default=False)),
                ('requires_subscription', models.BooleanField(default=True)),
                ('subscription_tiers', models.JSONField(default=list, help_text='List of allowed subscription tiers')),
                ('thumbnail', models.ImageField(upload_to='course_thumbnails/')),
                ('preview_video', models.FileField(blank=True, upload_to='course_previews/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('enrollment_count', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.TextField(blank=True, max_length=300)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='content.category')),
                ('tags', models.ManyToManyField(blank=True, related_name='courses', to='content.tag')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField()),
                ('content_type', models.CharField(choices=[('video', 'Відео'), ('pdf', 'PDF'), ('article', 'Стаття'), ('quiz', 'Тест')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('video_file', models.FileField(blank=True, upload_to='materials/videos/')),
                ('video_duration_seconds', models.PositiveIntegerField(default=0)),
                ('pdf_file', models.FileField(blank=True, upload_to='materials/pdfs/')),
                ('article_content', models.TextField(blank=True)),
                ('is_preview', models.BooleanField(default=False, help_text='Available without subscription')),
                ('preview_seconds', models.PositiveIntegerField(default=20, help_text='Preview duration for video')),
                ('preview_percentage', models.PositiveIntegerField(default=10, help_text='Preview percentage for PDF/article')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='content.course')),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
                'db_table': 'materials',
                'ordering': ['order', 'created_at'],
                'unique_together': {('course', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='UserCourseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='content.course')),
                ('materials_completed', models.ManyToManyField(blank=True, related_name='completed_by', to='content.material')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Course Progress',
                'verbose_name_plural': 'User Course Progress',
                'db_table': 'user_course_progress',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='content.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Favorite',
                'verbose_name_plural': 'Favorites',
                'db_table': 'favorites',
                'unique_together': {('user', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['slug'], name='courses_slug_360be0_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_published', 'published_at'], name='courses_is_publ_c3295c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercourseprogress',
            unique_together={('user', 'course')},
        ),
    ]
