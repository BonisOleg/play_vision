# Generated by Django 5.1.6 on 2025-09-25 12:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
        ('payments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(max_length=300)),
                ('event_type', models.CharField(choices=[('forum', 'Форум'), ('webinar', 'Вебінар'), ('workshop', 'Майстер-клас'), ('internship', 'Стажування'), ('seminar', 'Семінар'), ('conference', 'Конференція')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Чернетка'), ('published', 'Опублікований'), ('cancelled', 'Скасований'), ('completed', 'Завершений')], default='draft', max_length=20)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('timezone_name', models.CharField(default='Europe/Kyiv', max_length=50)),
                ('location', models.CharField(help_text='Фізична адреса або "Онлайн"', max_length=200)),
                ('online_link', models.URLField(blank=True, help_text='Посилання для онлайн івенту')),
                ('max_attendees', models.PositiveIntegerField(default=100)),
                ('tickets_sold', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_free', models.BooleanField(default=True)),
                ('thumbnail', models.ImageField(blank=True, upload_to='event_thumbnails/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('banner_image', models.ImageField(blank=True, upload_to='event_banners/')),
                ('is_featured', models.BooleanField(default=False)),
                ('requires_approval', models.BooleanField(default=False, help_text='Чи потрібне підтвердження реєстрації')),
                ('send_reminders', models.BooleanField(default=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.TextField(blank=True, max_length=300)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('bio', models.TextField()),
                ('position', models.CharField(max_length=200)),
                ('company', models.CharField(blank=True, max_length=200)),
                ('photo', models.ImageField(blank=True, upload_to='speaker_photos/')),
                ('social_links', models.JSONField(blank=True, default=dict)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Speaker',
                'verbose_name_plural': 'Speakers',
                'db_table': 'speakers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Очікує'), ('confirmed', 'Підтверджено'), ('cancelled', 'Скасовано'), ('attended', 'Відвідав')], default='pending', max_length=20)),
                ('registration_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Registration',
                'verbose_name_plural': 'Event Registrations',
                'db_table': 'event_registrations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(max_length=20, unique=True)),
                ('qr_code', models.ImageField(blank=True, upload_to='event_qr_codes/')),
                ('status', models.CharField(choices=[('active', 'Активний'), ('used', 'Використаний'), ('cancelled', 'Скасований')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('used_balance', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='events.event')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_tickets', to='payments.payment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Ticket',
                'verbose_name_plural': 'Event Tickets',
                'db_table': 'event_tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='speakers',
            field=models.ManyToManyField(blank=True, related_name='events', to='events.speaker'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='events', to='content.tag'),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together={('user', 'event')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['slug'], name='events_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status', 'start_datetime'], name='events_status_start_datetime_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'status'], name='events_event_type_status_idx'),
        ),
        migrations.AddIndex(
            model_name='eventregistration',
            index=models.Index(fields=['user', 'status'], name='event_registrations_user_status_idx'),
        ),
        migrations.AddIndex(
            model_name='eventticket',
            index=models.Index(fields=['ticket_number'], name='event_tickets_ticket_number_idx'),
        ),
    ]
