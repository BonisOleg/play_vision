# Generated by Django 5.1.6 on 2025-10-26 10:57

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models, connection


def add_field_if_not_exists(apps, schema_editor):
    """Додає поля тільки якщо вони не існують"""
    db_alias = schema_editor.connection.alias
    
    # Перевіряємо які колонки існують
    with connection.cursor() as cursor:
        # Для PostgreSQL
        if connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='events' AND table_schema='public'
            """)
            existing_event_columns = {row[0] for row in cursor.fetchall()}
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='event_registrations' AND table_schema='public'
            """)
            existing_registration_columns = {row[0] for row in cursor.fetchall()}
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='event_tickets' AND table_schema='public'
            """)
            existing_ticket_columns = {row[0] for row in cursor.fetchall()}
            
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='speakers' AND table_schema='public'
            """)
            existing_speaker_columns = {row[0] for row in cursor.fetchall()}
            
        # Для SQLite
        else:
            cursor.execute("PRAGMA table_info(events)")
            existing_event_columns = {row[1] for row in cursor.fetchall()}
            
            cursor.execute("PRAGMA table_info(event_registrations)")
            existing_registration_columns = {row[1] for row in cursor.fetchall()}
            
            cursor.execute("PRAGMA table_info(event_tickets)")
            existing_ticket_columns = {row[1] for row in cursor.fetchall()}
            
            cursor.execute("PRAGMA table_info(speakers)")
            existing_speaker_columns = {row[1] for row in cursor.fetchall()}
        
        # Додаємо поля в Event, яких немає
        event_fields_to_add = {
            'benefits': "ALTER TABLE events ADD COLUMN benefits JSONB DEFAULT '[]'",
            'event_category': "ALTER TABLE events ADD COLUMN event_category VARCHAR(50) DEFAULT ''",
            'target_audience': "ALTER TABLE events ADD COLUMN target_audience JSONB DEFAULT '[]'",
            'ticket_tiers': "ALTER TABLE events ADD COLUMN ticket_tiers JSONB DEFAULT '[]'"
        }
        
        for field_name, sql in event_fields_to_add.items():
            if field_name not in existing_event_columns:
                try:
                    if connection.vendor == 'postgresql':
                        cursor.execute(sql)
                    else:
                        # SQLite має інший синтаксис
                        if 'JSONB' in sql:
                            sql = sql.replace('JSONB', 'TEXT')
                        cursor.execute(sql)
                except Exception as e:
                    print(f"Warning: Could not add {field_name}: {e}")
        
        # Додаємо поля в EventRegistration, яких немає
        registration_fields_to_add = {
            'attendee_email': "ALTER TABLE event_registrations ADD COLUMN attendee_email VARCHAR(254) DEFAULT ''",
            'attendee_name': "ALTER TABLE event_registrations ADD COLUMN attendee_name VARCHAR(200) DEFAULT ''",
            'attendee_phone': "ALTER TABLE event_registrations ADD COLUMN attendee_phone VARCHAR(20) DEFAULT ''",
            'company': "ALTER TABLE event_registrations ADD COLUMN company VARCHAR(200) DEFAULT ''",
            'custom_fields': "ALTER TABLE event_registrations ADD COLUMN custom_fields JSONB DEFAULT '{}'",
            'dietary_requirements': "ALTER TABLE event_registrations ADD COLUMN dietary_requirements TEXT DEFAULT ''",
            'emergency_contact': "ALTER TABLE event_registrations ADD COLUMN emergency_contact VARCHAR(100) DEFAULT ''",
            'emergency_phone': "ALTER TABLE event_registrations ADD COLUMN emergency_phone VARCHAR(20) DEFAULT ''",
            'how_did_you_hear': "ALTER TABLE event_registrations ADD COLUMN how_did_you_hear VARCHAR(100) DEFAULT ''",
            'marketing_consent': "ALTER TABLE event_registrations ADD COLUMN marketing_consent BOOLEAN DEFAULT FALSE",
            'notes': "ALTER TABLE event_registrations ADD COLUMN notes TEXT DEFAULT ''",
            'position': "ALTER TABLE event_registrations ADD COLUMN position VARCHAR(200) DEFAULT ''",
            'special_needs': "ALTER TABLE event_registrations ADD COLUMN special_needs TEXT DEFAULT ''",
            'ticket_id': "ALTER TABLE event_registrations ADD COLUMN ticket_id BIGINT REFERENCES event_tickets(id)"
        }
        
        for field_name, sql in registration_fields_to_add.items():
            if field_name not in existing_registration_columns:
                try:
                    if connection.vendor == 'postgresql':
                        cursor.execute(sql)
                    else:
                        if 'JSONB' in sql:
                            sql = sql.replace('JSONB', 'TEXT')
                        if 'BOOLEAN' in sql:
                            sql = sql.replace('BOOLEAN', 'INTEGER')
                        cursor.execute(sql)
                except Exception as e:
                    print(f"Warning: Could not add {field_name}: {e}")
        
        # Додаємо поля в EventTicket, яких немає
        ticket_fields_to_add = {
            'checked_in_by_id': "ALTER TABLE event_tickets ADD COLUMN checked_in_by_id BIGINT REFERENCES users(id)",
            'price': "ALTER TABLE event_tickets ADD COLUMN price DECIMAL(10,2) DEFAULT 0.00",
            'qr_data': "ALTER TABLE event_tickets ADD COLUMN qr_data TEXT DEFAULT ''",
            'updated_at': "ALTER TABLE event_tickets ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        }
        
        for field_name, sql in ticket_fields_to_add.items():
            if field_name not in existing_ticket_columns:
                try:
                    if connection.vendor == 'postgresql':
                        cursor.execute(sql)
                    else:
                        if 'TIMESTAMP' in sql:
                            sql = sql.replace('TIMESTAMP', 'DATETIME')
                        cursor.execute(sql)
                except Exception as e:
                    print(f"Warning: Could not add {field_name}: {e}")
        
        # Додаємо поля в Speaker, яких немає
        speaker_fields_to_add = {
            'email': "ALTER TABLE speakers ADD COLUMN email VARCHAR(254) UNIQUE DEFAULT ''",
            'first_name': "ALTER TABLE speakers ADD COLUMN first_name VARCHAR(50) DEFAULT ''",
            'last_name': "ALTER TABLE speakers ADD COLUMN last_name VARCHAR(50) DEFAULT ''",
            'is_active': "ALTER TABLE speakers ADD COLUMN is_active BOOLEAN DEFAULT TRUE",
            'linkedin_url': "ALTER TABLE speakers ADD COLUMN linkedin_url VARCHAR(200) DEFAULT ''",
            'twitter_url': "ALTER TABLE speakers ADD COLUMN twitter_url VARCHAR(200) DEFAULT ''",
            'website_url': "ALTER TABLE speakers ADD COLUMN website_url VARCHAR(200) DEFAULT ''",
            'updated_at': "ALTER TABLE speakers ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        }
        
        for field_name, sql in speaker_fields_to_add.items():
            if field_name not in existing_speaker_columns:
                try:
                    if connection.vendor == 'postgresql':
                        cursor.execute(sql)
                    else:
                        if 'BOOLEAN' in sql:
                            sql = sql.replace('BOOLEAN', 'INTEGER')
                        if 'TIMESTAMP' in sql:
                            sql = sql.replace('TIMESTAMP', 'DATETIME')
                        cursor.execute(sql)
                except Exception as e:
                    print(f"Warning: Could not add {field_name}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0005_update_speaker_model'),
        ('payments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Спершу виконуємо RunPython для додавання полів
        migrations.RunPython(add_field_if_not_exists, migrations.RunPython.noop),
        
        # Створюємо нові моделі
        migrations.CreateModel(
            name='EventFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('content_rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('speaker_rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('organization_rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('what_liked', models.TextField(blank=True)),
                ('what_could_improve', models.TextField(blank=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField()),
                ('would_attend_again', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Event Feedback',
                'verbose_name_plural': 'Event Feedback',
                'db_table': 'event_feedback',
            },
        ),
        migrations.CreateModel(
            name='EventWaitlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('notified', models.BooleanField(default=False)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Event Waitlist',
                'verbose_name_plural': 'Event Waitlists',
                'db_table': 'event_waitlist',
                'ordering': ['created_at'],
            },
        ),
        
        # Змінюємо Meta options
        migrations.AlterModelOptions(
            name='eventregistration',
            options={'verbose_name': 'Event Registration', 'verbose_name_plural': 'Event Registrations'},
        ),
        migrations.AlterModelOptions(
            name='speaker',
            options={'ordering': ['last_name', 'first_name'], 'verbose_name': 'Speaker', 'verbose_name_plural': 'Speakers'},
        ),
        
        # Змінюємо AlterField замість AddField для існуючих полів
        migrations.AlterField(
            model_name='event',
            name='is_free',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='event',
            name='price',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='eventticket',
            name='qr_code',
            field=models.ImageField(blank=True, upload_to='ticket_qr/'),
        ),
        migrations.AlterField(
            model_name='eventticket',
            name='status',
            field=models.CharField(choices=[('pending', 'Очікує оплати'), ('confirmed', 'Підтверджений'), ('cancelled', 'Скасований'), ('used', 'Використаний'), ('refunded', 'Повернений')], default='pending', max_length=20),
        ),
        migrations.AlterField(
            model_name='eventticket',
            name='used_balance',
            field=models.BooleanField(default=False, help_text='Чи використаний баланс квитків з підписки'),
        ),
        migrations.AlterField(
            model_name='speaker',
            name='bio',
            field=models.TextField(default=''),
        ),
        migrations.AlterField(
            model_name='speaker',
            name='company',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='speaker',
            name='position',
            field=models.CharField(max_length=100),
        ),
        
        # Додаємо зв'язки для нових моделей
        migrations.AddField(
            model_name='eventfeedback',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='events.event'),
        ),
        migrations.AddField(
            model_name='eventfeedback',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_feedback', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventwaitlist',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist', to='events.event'),
        ),
        migrations.AddField(
            model_name='eventwaitlist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_waitlist', to=settings.AUTH_USER_MODEL),
        ),
        
        # Унікальність
        migrations.AlterUniqueTogether(
            name='eventfeedback',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventwaitlist',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventticket',
            unique_together={('event', 'user')},
        ),
    ]
