"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω—å AI
"""
from django.core.management.base import BaseCommand
from apps.content.models import Course
from apps.ai.services import KnowledgeBaseLoader


class Command(BaseCommand):
    help = '–Ü–Ω–¥–µ–∫—Å—É—î –∫—É—Ä—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω—å AI –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--course-id',
            type=int,
            help='–Ü–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫—É—Ä—Å –∑–∞ ID'
        )
        parser.add_argument(
            '--published-only',
            action='store_true',
            help='–Ü–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –∫—É—Ä—Å–∏'
        )
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –∫—É—Ä—Å—ñ–≤ –ø–µ—Ä–µ–¥ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è–º'
        )
    
    def handle(self, *args, **options):
        course_id = options.get('course_id')
        published_only = options['published_only']
        clear_existing = options['clear_existing']
        
        loader = KnowledgeBaseLoader()
        
        # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫—É—Ä—Å—ñ–≤
        if clear_existing:
            from apps.ai.models import KnowledgeBase
            deleted = KnowledgeBase.objects.filter(
                content_type__in=['course', 'lesson']
            ).delete()
            self.stdout.write(
                self.style.WARNING(f'–í–∏–¥–∞–ª–µ–Ω–æ {deleted[0]} –∑–∞–ø–∏—Å—ñ–≤ –∫—É—Ä—Å—ñ–≤ –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å')
            )
        
        # –Ü–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å—É
        if course_id:
            try:
                course = Course.objects.get(id=course_id)
                success = loader.index_course_content(course_id)
                
                if success:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ –ö—É—Ä—Å "{course.title}" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–∏–π')
                    )
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É "{course.title}"')
                    )
                return
                
            except Course.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –ö—É—Ä—Å –∑ ID {course_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
                )
                return
        
        # –Ü–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫—É—Ä—Å—ñ–≤
        queryset = Course.objects.all()
        if published_only:
            queryset = queryset.filter(is_published=True)
        
        courses = queryset.select_related('category').prefetch_related('tags', 'materials')
        total_courses = courses.count()
        
        if total_courses == 0:
            self.stdout.write(
                self.style.WARNING('–ö—É—Ä—Å–∏ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ')
            )
            return
        
        self.stdout.write(f'–Ü–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è {total_courses} –∫—É—Ä—Å—ñ–≤...')
        
        indexed_count = 0
        failed_count = 0
        
        for course in courses:
            try:
                success = loader.index_course_content(course.id)
                if success:
                    indexed_count += 1
                    self.stdout.write(f'  ‚úÖ {course.title}')
                else:
                    failed_count += 1
                    self.stdout.write(f'  ‚ùå {course.title}')
                    
            except Exception as e:
                failed_count += 1
                self.stdout.write(f'  ‚ùå {course.title}: {str(e)}')
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        self.stdout.write('')
        self.stdout.write(f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è:')
        self.stdout.write(f'  - –£—Å–ø—ñ—à–Ω–æ: {indexed_count}')
        self.stdout.write(f'  - –ü–æ–º–∏–ª–∫–∏: {failed_count}')
        self.stdout.write(f'  - –í—Å—å–æ–≥–æ: {total_courses}')
        
        if indexed_count > 0:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –Ü–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ñ–æ–¥–µ–Ω –∫—É—Ä—Å –Ω–µ –±—É–ª–æ –ø—Ä–æ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–æ')
            )
