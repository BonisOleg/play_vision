from django.core.management.base import BaseCommand
from apps.loyalty.models import PointEarningRule, RedemptionOption
from decimal import Decimal


class Command(BaseCommand):
    help = '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –∑–≥—ñ–¥–Ω–æ —Å–∫—Ä—ñ–Ω—ñ–≤'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ...'))

        # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø—Ä–∞–≤–∏–ª–∞
        PointEarningRule.objects.all().delete()
        RedemptionOption.objects.all().delete()

        # === –ü–†–ê–í–ò–õ–ê –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –ó–ê –ü–û–ö–£–ü–ö–ò ===
        purchase_rules = [
            # –ë–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏
            {'tier': 'none', 'min': 399, 'max': 1000, 'points': 5},
            {'tier': 'none', 'min': 1000, 'max': 3000, 'points': 10},
            {'tier': 'none', 'min': 3000, 'max': None, 'points': 15},

            # C-Vision / B-Vision
            {'tier': 'c_vision', 'min': 399, 'max': 1000, 'points': 8},
            {'tier': 'c_vision', 'min': 1000, 'max': 3000, 'points': 15},
            {'tier': 'c_vision', 'min': 3000, 'max': None, 'points': 23},

            {'tier': 'b_vision', 'min': 399, 'max': 1000, 'points': 8},
            {'tier': 'b_vision', 'min': 1000, 'max': 3000, 'points': 15},
            {'tier': 'b_vision', 'min': 3000, 'max': None, 'points': 23},

            # A-Vision / Pro-Vision
            {'tier': 'a_vision', 'min': 399, 'max': 1000, 'points': 10},
            {'tier': 'a_vision', 'min': 1000, 'max': 3000, 'points': 20},
            {'tier': 'a_vision', 'min': 3000, 'max': None, 'points': 30},

            {'tier': 'pro_vision', 'min': 399, 'max': 1000, 'points': 10},
            {'tier': 'pro_vision', 'min': 1000, 'max': 3000, 'points': 20},
            {'tier': 'pro_vision', 'min': 3000, 'max': None, 'points': 30},
        ]

        order = 0
        for rule in purchase_rules:
            PointEarningRule.objects.create(
                rule_type='purchase',
                subscription_tier=rule['tier'],
                min_amount=Decimal(str(rule['min'])),
                max_amount=Decimal(str(rule['max'])) if rule['max'] else None,
                points=rule['points'],
                is_active=True,
                order=order
            )
            order += 1

        # === –ü–†–ê–í–ò–õ–ê –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –ó–ê –ü–Ü–î–ü–ò–°–ö–ò ===
        subscription_rules = [
            # C-Vision / B-Vision
            {'tier': 'c_vision', 'months': 1, 'points': 15},
            {'tier': 'c_vision', 'months': 3, 'points': 50},
            {'tier': 'c_vision', 'months': 6, 'points': 100},
            {'tier': 'c_vision', 'months': 12, 'points': 200},

            {'tier': 'b_vision', 'months': 1, 'points': 15},
            {'tier': 'b_vision', 'months': 3, 'points': 50},
            {'tier': 'b_vision', 'months': 6, 'points': 100},
            {'tier': 'b_vision', 'months': 12, 'points': 200},

            # A-Vision / Pro-Vision
            {'tier': 'a_vision', 'months': 3, 'points': 80},
            {'tier': 'a_vision', 'months': 6, 'points': 160},
            {'tier': 'a_vision', 'months': 12, 'points': 320},

            {'tier': 'pro_vision', 'months': 3, 'points': 80},
            {'tier': 'pro_vision', 'months': 6, 'points': 160},
            {'tier': 'pro_vision', 'months': 12, 'points': 320},
        ]

        for rule in subscription_rules:
            PointEarningRule.objects.create(
                rule_type='subscription',
                subscription_tier=rule['tier'],
                subscription_duration_months=rule['months'],
                points=rule['points'],
                is_active=True,
                order=order
            )
            order += 1

        # === –ü–†–ê–í–ò–õ–ê –í–ò–¢–†–ê–¢ ===
        # –ó–Ω–∏–∂–∫–∏ (–±–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏)
        RedemptionOption.objects.create(
            option_type='discount',
            name='–ó–Ω–∏–∂–∫–∞ 5%',
            description='–ó–Ω–∏–∂–∫–∞ 5% –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É',
            points_required=50,
            discount_percentage=5,
            requires_subscription=False,
            is_active=True,
            display_order=1
        )

        RedemptionOption.objects.create(
            option_type='discount',
            name='–ó–Ω–∏–∂–∫–∞ 10%',
            description='–ó–Ω–∏–∂–∫–∞ 10% –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∫—É–ø–∫—É',
            points_required=100,
            discount_percentage=10,
            requires_subscription=False,
            is_active=True,
            display_order=2
        )

        # –û–±–º—ñ–Ω –Ω–∞ –º—ñ—Å—è—Ü—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ç—ñ–ª—å–∫–∏ C/B-Vision)
        RedemptionOption.objects.create(
            option_type='subscription_month',
            name='–ú—ñ—Å—è—Ü—å C-Vision',
            description='–û–±–º—ñ–Ω –±–∞–ª—ñ–≤ –Ω–∞ –ø–æ–≤–Ω–∏–π –º—ñ—Å—è—Ü—å C-Vision –ø—ñ–¥–ø–∏—Å–∫–∏',
            points_required=200,
            subscription_tier='c_vision',
            requires_subscription=True,
            is_active=True,
            display_order=3
        )

        RedemptionOption.objects.create(
            option_type='subscription_month',
            name='–ú—ñ—Å—è—Ü—å B-Vision',
            description='–û–±–º—ñ–Ω –±–∞–ª—ñ–≤ –Ω–∞ –ø–æ–≤–Ω–∏–π –º—ñ—Å—è—Ü—å B-Vision –ø—ñ–¥–ø–∏—Å–∫–∏',
            points_required=350,
            subscription_tier='b_vision',
            requires_subscription=True,
            is_active=True,
            display_order=4
        )

        self.stdout.write(self.style.SUCCESS(f'‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {PointEarningRule.objects.count()} –ø—Ä–∞–≤–∏–ª –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è'))
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {RedemptionOption.objects.count()} –æ–ø—Ü—ñ–π –≤–∏—Ç—Ä–∞—Ç–∏'))
        self.stdout.write(self.style.SUCCESS('üéâ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))

