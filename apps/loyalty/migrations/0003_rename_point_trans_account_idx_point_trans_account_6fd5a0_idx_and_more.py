# Generated by Django 5.1.6 on 2025-10-26 10:57

from django.db import migrations, connection


def rename_indexes_if_exist(apps, schema_editor):
    """Перейменовує індекси тільки якщо вони існують"""
    db_alias = schema_editor.connection.alias
    
    with connection.cursor() as cursor:
        # Перевіряємо які індекси існують
        if connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT indexname 
                FROM pg_indexes 
                WHERE tablename='point_transactions' AND schemaname='public'
            """)
            existing_indexes = {row[0] for row in cursor.fetchall()}
        else:
            # SQLite
            cursor.execute("PRAGMA index_list(point_transactions)")
            existing_indexes = {row[1] for row in cursor.fetchall()}
        
        # Перейменовуємо індекси, якщо вони існують
        index_renames = {
            'point_trans_account_idx': 'point_trans_account_6fd5a0_idx',
            'point_trans_reference_idx': 'point_trans_referen_0a803d_idx'
        }
        
        for old_name, new_name in index_renames.items():
            if old_name in existing_indexes and new_name not in existing_indexes:
                try:
                    if connection.vendor == 'postgresql':
                        cursor.execute(f'ALTER INDEX {old_name} RENAME TO {new_name}')
                    else:
                        # SQLite не підтримує перейменування індексів, треба видалити та створити
                        # Але це складно без інформації про структуру, тому просто пропускаємо
                        pass
                    print(f"Renamed index {old_name} to {new_name}")
                except Exception as e:
                    print(f"Warning: Could not rename index {old_name}: {e}")
            elif new_name in existing_indexes:
                print(f"Index {new_name} already exists, skipping rename")
            elif old_name not in existing_indexes:
                print(f"Index {old_name} does not exist, skipping rename")


class Migration(migrations.Migration):

    dependencies = [
        ('loyalty', '0002_add_lifetime_spent_points'),
    ]

    operations = [
        migrations.RunPython(rename_indexes_if_exist, migrations.RunPython.noop),
    ]
