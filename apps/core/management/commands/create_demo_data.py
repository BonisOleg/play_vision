"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è demo –¥–∞–Ω–∏—Ö –¥–ª—è Play Vision
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta


class Command(BaseCommand):
    help = '–°—Ç–≤–æ—Ä—é—î demo –¥–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏'
    
    def handle(self, *args, **options):
        self.stdout.write('üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è demo –¥–∞–Ω–∏—Ö –¥–ª—è Play Vision...')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.create_users()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–µ–≥—ñ–≤
        self.create_categories_and_tags()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
        self.create_courses()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ–¥–ø–∏—Å–æ–∫
        self.create_subscription_plans()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—ñ–≤
        self.create_events()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
        self.create_coupons()
        
        # AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.create_ai_config()
        
        self.stdout.write(
            self.style.SUCCESS('üéâ Demo –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!')
        )
    
    def create_users(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        User = get_user_model()
        
        users_data = [
            {
                'email': 'admin@playvision.com',
                'password': 'admin123',
                'is_superuser': True,
                'first_name': '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
                'last_name': '–°–∏—Å—Ç–µ–º–∏'
            },
            {
                'email': 'coach@playvision.com', 
                'password': 'coach123',
                'first_name': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä',
                'last_name': '–¢—Ä–µ–Ω–µ—Ä–µ–Ω–∫–æ'
            },
            {
                'email': 'analyst@playvision.com',
                'password': 'analyst123', 
                'first_name': '–ú–∞–∫—Å–∏–º',
                'last_name': '–ê–Ω–∞–ª—ñ—Ç–∏–∫'
            }
        ]
        
        for user_data in users_data:
            if not User.objects.filter(email=user_data['email']).exists():
                is_super = user_data.pop('is_superuser', False)
                password = user_data.pop('password')
                
                # –î–æ–¥–∞—î–º–æ username —è–∫–∏–π –¥–æ—Ä—ñ–≤–Ω—é—î email
                user_data['username'] = user_data['email']
                
                if is_super:
                    user = User.objects.create_superuser(**user_data, password=password)
                else:
                    user = User.objects.create_user(**user_data, password=password)
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—è
                from apps.accounts.models import Profile
                Profile.objects.get_or_create(
                    user=user,
                    defaults={
                        'first_name': user_data['first_name'],
                        'last_name': user_data['last_name'],
                        'completed_survey': True
                    }
                )
                self.stdout.write(f'‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {user.email}')
        
    def create_categories_and_tags(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–µ–≥—ñ–≤"""
        from apps.content.models import Category, Tag
        
        categories_data = [
            {'name': '–¢—Ä–µ–Ω–µ—Ä', 'slug': 'coach', 'icon': '‚öΩ', 'description': '–ö—É—Ä—Å–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤'},
            {'name': '–ê–Ω–∞–ª—ñ—Ç–∏–∫', 'slug': 'analyst', 'icon': 'üìä', 'description': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤ —Ñ—É—Ç–±–æ–ª—ñ'},
            {'name': '–ù—É—Ç—Ä–∏—Ü—ñ–æ–ª–æ–≥—ñ—è', 'slug': 'nutrition', 'icon': 'ü•ó', 'description': '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤'},
            {'name': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è', 'slug': 'psychology', 'icon': 'üß†', 'description': '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è'},
            {'name': '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', 'slug': 'management', 'icon': 'üëî', 'description': '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤ —Ñ—É—Ç–±–æ–ª—ñ'},
        ]
        
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                slug=cat_data['slug'],
                defaults=cat_data
            )
            if created:
                self.stdout.write(f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {category.name}')
        
        tags_data = [
            '—Ç—Ä–µ–Ω–µ—Ä', '–∞–Ω–∞–ª—ñ—Ç–∏–∫', '—Ç–∞–∫—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞', 
            '–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '—Å–∫–∞—É—Ç–∏–Ω–≥', '–º–æ–ª–æ–¥—å',
            '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π', '–±–∞–∑–æ–≤–∏–π', '–µ–∫—Å–ø–µ—Ä—Ç', '–ø–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å'
        ]
        
        for tag_name in tags_data:
            tag, created = Tag.objects.get_or_create(
                name=tag_name,
                defaults={'slug': tag_name.replace(' ', '-')}
            )
            if created:
                self.stdout.write(f'‚úÖ –¢–µ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {tag.name}')
    
    def create_courses(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤"""
        from apps.content.models import Course, Category, Tag
        
        courses_data = [
            {
                'title': '–°–∫–∞—É—Ç–∏–Ω–≥ –º–æ–ª–æ–¥–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤',
                'slug': 'scouting-young-players',
                'category': 'analyst',
                'description': '–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å –ø–æ —Å–∫–∞—É—Ç–∏–Ω–≥—É –º–æ–ª–æ–¥–∏—Ö —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤',
                'short_description': '–ù–∞–≤—á—ñ—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –º–æ–ª–æ–¥–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤',
                'difficulty': 'intermediate',
                'duration_minutes': 180,
                'price': Decimal('299.00'),
                'is_published': True,
                'is_featured': True,
                'tags': ['—Å–∫–∞—É—Ç–∏–Ω–≥', '–º–æ–ª–æ–¥—å', '–∞–Ω–∞–ª—ñ—Ç–∏–∫']
            },
            {
                'title': '–¢–∞–∫—Ç–∏–∫–∞ 4-3-3: –°—É—á–∞—Å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥',
                'slug': 'tactics-433-modern',
                'category': 'coach', 
                'description': '–î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä —Ç–∞–∫—Ç–∏—á–Ω–æ—ó —Å—Ö–µ–º–∏ 4-3-3',
                'short_description': '–í–∏–≤—á—ñ—Ç—å –≤—Å—ñ –Ω—é–∞–Ω—Å–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—ó —Ç–∞–∫—Ç–∏–∫–∏',
                'difficulty': 'advanced',
                'duration_minutes': 240,
                'price': Decimal('399.00'),
                'is_published': True,
                'tags': ['—Ç–∞–∫—Ç–∏–∫–∞', '—Ç—Ä–µ–Ω–µ—Ä', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π']
            },
            {
                'title': '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç–∞',
                'slug': 'football-nutrition',
                'category': 'nutrition',
                'description': '–û—Å–Ω–æ–≤–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤',
                'short_description': '–ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è - –æ—Å–Ω–æ–≤–∞ —É—Å–ø—ñ—Ö—É',
                'difficulty': 'beginner',
                'duration_minutes': 120,
                'price': Decimal('199.00'),
                'is_published': True,
                'is_free': True,
                'tags': ['—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '–±–∞–∑–æ–≤–∏–π']
            },
            {
                'title': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è –ø–µ—Ä–µ–º–æ–∂—Ü—è',
                'slug': 'winner-psychology',
                'category': 'psychology',
                'description': '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤',
                'short_description': '–†–æ–∑–≤–∏–π—Ç–µ –ø–µ—Ä–µ–º–æ–∂–Ω–∏–π –º–µ–Ω—Ç–∞–ª—ñ—Ç–µ—Ç',
                'difficulty': 'intermediate', 
                'duration_minutes': 150,
                'price': Decimal('249.00'),
                'is_published': True,
                'tags': ['–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '–º–µ–Ω—Ç–∞–ª—å–Ω—ñ—Å—Ç—å']
            },
            {
                'title': '–ê–Ω–∞–ª—ñ–∑ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤',
                'slug': 'opponent-analysis',
                'category': 'analyst',
                'description': '–ú–µ—Ç–æ–¥–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–∞–Ω–¥-—Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤',
                'short_description': '–í–∏–≤—á—ñ—Ç—å —Å–ª–∞–±–∫—ñ —Ç–∞ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤', 
                'difficulty': 'advanced',
                'duration_minutes': 200,
                'price': Decimal('349.00'),
                'is_published': True,
                'tags': ['–∞–Ω–∞–ª—ñ—Ç–∏–∫', '—Ç–∞–∫—Ç–∏–∫–∞', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π']
            }
        ]
        
        for course_data in courses_data:
            if not Course.objects.filter(slug=course_data['slug']).exists():
                tags = course_data.pop('tags', [])
                category_slug = course_data.pop('category')
                
                try:
                    category = Category.objects.get(slug=category_slug)
                    course_data['category'] = category
                    
                    course = Course.objects.create(**course_data)
                    
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤
                    for tag_name in tags:
                        try:
                            tag = Tag.objects.get(name=tag_name)
                            course.tags.add(tag)
                        except Tag.DoesNotExist:
                            pass
                    
                    self.stdout.write(f'‚úÖ –ö—É—Ä—Å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {course.title}')
                except Category.DoesNotExist:
                    self.stdout.write(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {category_slug}')
    
    def create_subscription_plans(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ–¥–ø–∏—Å–æ–∫"""
        from apps.subscriptions.models import Plan
        
        plans_data = [
            {
                'name': '–ë–∞–∑–æ–≤–∏–π –º—ñ—Å—è—Ü—å',
                'slug': 'basic-month',
                'duration': '1_month',
                'duration_months': 1,
                'price': Decimal('199.00'),
                'features': ['–î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö –∫—É—Ä—Å—ñ–≤', '–§–æ—Ä—É–º —Å–ø—ñ–ª—å–Ω–æ—Ç–∏'],
                'is_popular': False
            },
            {
                'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç 3 –º—ñ—Å—è—Ü—ñ', 
                'slug': 'standard-3months',
                'duration': '3_months',
                'duration_months': 3,
                'price': Decimal('499.00'),
                'features': ['–í—Å—ñ –∫—É—Ä—Å–∏', '–Ü–≤–µ–Ω—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'],
                'is_popular': True,
                'badge_text': '–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π'
            },
            {
                'name': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä—ñ–∫',
                'slug': 'pro-year', 
                'duration': '12_months',
                'duration_months': 12,
                'price': Decimal('1599.00'),
                'features': ['–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ', '–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ —ñ–≤–µ–Ω—Ç–∏', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó'],
                'event_tickets_balance': 12,
                'discount_percentage': 20
            }
        ]
        
        for plan_data in plans_data:
            plan, created = Plan.objects.get_or_create(
                slug=plan_data['slug'],
                defaults=plan_data
            )
            if created:
                self.stdout.write(f'‚úÖ –ü–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {plan.name}')
    
    def create_events(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—ñ–≤"""
        from apps.events.models import Event, Speaker
        from django.contrib.auth import get_user_model
        
        User = get_user_model()
        organizer = User.objects.filter(email='admin@playvision.com').first()
        
        if not organizer:
            return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø—ñ–∫–µ—Ä—ñ–≤
        speakers_data = [
            {
                'first_name': '–ê–Ω–¥—Ä—ñ–π',
                'last_name': '–®–µ–≤—á–µ–Ω–∫–æ', 
                'email': 'sheva@playvision.com',
                'bio': '–õ–µ–≥–µ–Ω–¥–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ñ—É—Ç–±–æ–ª—É',
                'position': '–¢—Ä–µ–Ω–µ—Ä –∑–±—ñ—Ä–Ω–æ—ó –£–∫—Ä–∞—ó–Ω–∏',
                'company': '–£–ê–§'
            },
            {
                'first_name': '–û–ª–µ–≥',
                'last_name': '–ë–ª–æ—Ö—ñ–Ω',
                'email': 'blokhin@playvision.com', 
                'bio': '–í–æ–ª–æ–¥–∞—Ä –ó–æ–ª–æ—Ç–æ–≥–æ –º\'—è—á–∞',
                'position': '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
                'company': '–î–∏–Ω–∞–º–æ –ö–∏—ó–≤'
            }
        ]
        
        speakers = []
        for speaker_data in speakers_data:
            speaker, created = Speaker.objects.get_or_create(
                email=speaker_data['email'],
                defaults=speaker_data
            )
            speakers.append(speaker)
            if created:
                self.stdout.write(f'‚úÖ –°–ø—ñ–∫–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {speaker.full_name}')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≤–µ–Ω—Ç—ñ–≤
        events_data = [
            {
                'title': '–ú–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å –≤—ñ–¥ –ê–Ω–¥—Ä—ñ—è –®–µ–≤—á–µ–Ω–∫–∞',
                'slug': 'shevchenko-masterclass',
                'event_type': 'workshop',
                'description': '–£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–≤—á–∏—Ç–∏—Å—è —É –ª–µ–≥–µ–Ω–¥–∏',
                'short_description': '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å',
                'start_datetime': timezone.now() + timedelta(days=14),
                'end_datetime': timezone.now() + timedelta(days=14, hours=2),
                'location': '–û–Ω–ª–∞–π–Ω',
                'online_link': 'https://zoom.us/j/123456789',
                'max_attendees': 100,
                'price': Decimal('299.00'),
                'status': 'published',
                'is_featured': True,
                'speakers': [speakers[0]] if speakers else []
            },
            {
                'title': '–§–æ—Ä—É–º —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ 2024',
                'slug': 'coaches-forum-2024',
                'event_type': 'forum', 
                'description': '–©–æ—Ä—ñ—á–Ω–∏–π —Ñ–æ—Ä—É–º —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö —Ç—Ä–µ–Ω–µ—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏',
                'short_description': '–ó—É—Å—Ç—Ä—ñ—á –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤ –≥–∞–ª—É–∑—ñ',
                'start_datetime': timezone.now() + timedelta(days=30),
                'end_datetime': timezone.now() + timedelta(days=31),
                'location': '–ö–∏—ó–≤, –≥–æ—Ç–µ–ª—å –î–Ω—ñ–ø—Ä–æ',
                'max_attendees': 500,
                'price': Decimal('699.00'),
                'status': 'published',
                'requires_subscription': True,
                'speakers': speakers
            }
        ]
        
        for event_data in events_data:
            if not Event.objects.filter(slug=event_data['slug']).exists():
                speakers_list = event_data.pop('speakers', [])
                event_data['organizer'] = organizer
                
                event = Event.objects.create(**event_data)
                
                for speaker in speakers_list:
                    event.speakers.add(speaker)
                
                self.stdout.write(f'‚úÖ –Ü–≤–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {event.title}')
    
    def create_coupons(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"""
        from apps.payments.models import Coupon
        
        coupons_data = [
            {
                'code': 'WELCOME10',
                'discount_type': 'percentage',
                'discount_value': Decimal('10'),
                'valid_from': timezone.now(),
                'valid_until': timezone.now() + timedelta(days=90),
                'min_amount': Decimal('100'),
                'max_uses': 100,
                'is_active': True
            },
            {
                'code': 'FIRST50',
                'discount_type': 'fixed',
                'discount_value': Decimal('50'),
                'valid_from': timezone.now(),
                'valid_until': timezone.now() + timedelta(days=30),
                'max_uses': 50,
                'once_per_user': True,
                'is_active': True
            }
        ]
        
        for coupon_data in coupons_data:
            coupon, created = Coupon.objects.get_or_create(
                code=coupon_data['code'],
                defaults=coupon_data
            )
            if created:
                self.stdout.write(f'‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {coupon.code}')
    
    def create_ai_config(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        from apps.ai.models import AIConfiguration, AIAccessPolicy
        
        # AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config, created = AIConfiguration.objects.get_or_create(
            id=1,
            defaults={
                'llm_provider': 'openai',
                'llm_model': 'gpt-3.5-turbo',
                'is_enabled': True,
                'maintenance_mode': False
            }
        )
        if created:
            self.stdout.write('‚úÖ AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞')
        
        # –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø—É AI
        policies_data = [
            {
                'level': 'guest',
                'max_response_length': 200,
                'max_queries_per_day': 3,
                'max_queries_per_hour': 1,
                'cta_message': '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –¥–æ—Å—Ç—É–ø—É'
            },
            {
                'level': 'registered', 
                'max_response_length': 500,
                'max_queries_per_day': 10,
                'max_queries_per_hour': 5,
                'include_links': True,
                'show_previews': True,
                'cta_message': '–û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π'
            },
            {
                'level': 'subscriber_l1',
                'max_response_length': 1000,
                'max_queries_per_day': 50,
                'max_queries_per_hour': 20,
                'include_links': True,
                'show_previews': True,
                'access_premium_content': True
            }
        ]
        
        for policy_data in policies_data:
            policy, created = AIAccessPolicy.objects.get_or_create(
                level=policy_data['level'],
                defaults=policy_data
            )
            if created:
                self.stdout.write(f'‚úÖ AI –ø–æ–ª—ñ—Ç–∏–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: {policy.level}')
