"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta


class Command(BaseCommand):
    help = '–°—Ç–≤–æ—Ä—é—î —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –∫—É—Ä—Å–∏, —ñ–≤–µ–Ω—Ç–∏)'
    
    def handle(self, *args, **options):
        self.stdout.write('üìö –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö...')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–µ–≥—ñ–≤
        self.create_categories_and_tags()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
        self.create_courses()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ–¥–ø–∏—Å–æ–∫
        self.create_subscription_plans()
        
        # AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.create_ai_config()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!')
        )
    
    def create_categories_and_tags(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Ç–µ–≥—ñ–≤"""
        from apps.content.models import Category, Tag
        
        categories_data = [
            {'name': '–¢—Ä–µ–Ω–µ—Ä', 'slug': 'coach', 'icon': '‚öΩ', 'description': '–ö—É—Ä—Å–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤'},
            {'name': '–ê–Ω–∞–ª—ñ—Ç–∏–∫', 'slug': 'analyst', 'icon': 'üìä', 'description': '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤ —Ñ—É—Ç–±–æ–ª—ñ'},
            {'name': '–ù—É—Ç—Ä–∏—Ü—ñ–æ–ª–æ–≥—ñ—è', 'slug': 'nutrition', 'icon': 'ü•ó', 'description': '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤'},
            {'name': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è', 'slug': 'psychology', 'icon': 'üß†', 'description': '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è'},
            {'name': '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', 'slug': 'management', 'icon': 'üëî', 'description': '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤ —Ñ—É—Ç–±–æ–ª—ñ'},
        ]
        
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                slug=cat_data['slug'],
                defaults=cat_data
            )
            if created:
                self.stdout.write(f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}')
        
        tags_data = [
            '—Ç—Ä–µ–Ω–µ—Ä', '–∞–Ω–∞–ª—ñ—Ç–∏–∫', '—Ç–∞–∫—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞', 
            '–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '—Å–∫–∞—É—Ç–∏–Ω–≥', '–º–æ–ª–æ–¥—å',
            '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π', '–±–∞–∑–æ–≤–∏–π', '–µ–∫—Å–ø–µ—Ä—Ç', '–ø–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å'
        ]
        
        for tag_name in tags_data:
            tag, created = Tag.objects.get_or_create(
                name=tag_name,
                defaults={'slug': tag_name.replace(' ', '-')}
            )
            if created:
                self.stdout.write(f'‚úÖ –¢–µ–≥: {tag.name}')
    
    def create_courses(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤"""
        from apps.content.models import Course, Category, Tag
        
        courses_data = [
            {
                'title': '–°–∫–∞—É—Ç–∏–Ω–≥ –º–æ–ª–æ–¥–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤',
                'slug': 'scouting-young-players',
                'category': 'analyst',
                'description': '–ü–æ–≤–Ω–∏–π –∫—É—Ä—Å –ø–æ —Å–∫–∞—É—Ç–∏–Ω–≥—É –º–æ–ª–æ–¥–∏—Ö —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤. –í–∏–≤—á—ñ—Ç—å —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –º–æ–ª–æ–¥–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ –∞–Ω–∞–ª—ñ–∑—É.',
                'short_description': '–ù–∞–≤—á—ñ—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –º–æ–ª–æ–¥–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤',
                'difficulty': 'intermediate',
                'duration_minutes': 180,
                'price': Decimal('299.00'),
                'is_published': True,
                'is_featured': True,
                'tags': ['—Å–∫–∞—É—Ç–∏–Ω–≥', '–º–æ–ª–æ–¥—å', '–∞–Ω–∞–ª—ñ—Ç–∏–∫']
            },
            {
                'title': '–¢–∞–∫—Ç–∏–∫–∞ 4-3-3: –°—É—á–∞—Å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥',
                'slug': 'tactics-433-modern',
                'category': 'coach', 
                'description': '–î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä —Ç–∞–∫—Ç–∏—á–Ω–æ—ó —Å—Ö–µ–º–∏ 4-3-3 –≤ —Å—É—á–∞—Å–Ω–æ–º—É —Ñ—É—Ç–±–æ–ª—ñ. –ü—Ä–∏–Ω—Ü–∏–ø–∏ –≥—Ä–∏ –≤ –∞—Ç–∞—Ü—ñ —Ç–∞ –æ–±–æ—Ä–æ–Ω—ñ, –≤–∞—Ä—ñ–∞—Ü—ñ—ó —Å—Ö–µ–º–∏.',
                'short_description': '–í–∏–≤—á—ñ—Ç—å –≤—Å—ñ –Ω—é–∞–Ω—Å–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—ó —Ç–∞–∫—Ç–∏–∫–∏',
                'difficulty': 'advanced',
                'duration_minutes': 240,
                'price': Decimal('399.00'),
                'is_published': True,
                'tags': ['—Ç–∞–∫—Ç–∏–∫–∞', '—Ç—Ä–µ–Ω–µ—Ä', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π']
            },
            {
                'title': '–•–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç–∞',
                'slug': 'football-nutrition',
                'category': 'nutrition',
                'description': '–û—Å–Ω–æ–≤–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤. –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö–∞—Ä—á—É–≤–∞—Ç–∏—Å—è –¥–æ, –ø—ñ–¥ —á–∞—Å —Ç–∞ –ø—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ –º–∞—Ç—á—ñ–≤.',
                'short_description': '–ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è - –æ—Å–Ω–æ–≤–∞ —É—Å–ø—ñ—Ö—É',
                'difficulty': 'beginner',
                'duration_minutes': 120,
                'price': Decimal('199.00'),
                'is_published': True,
                'is_free': True,
                'tags': ['—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', '–±–∞–∑–æ–≤–∏–π']
            },
            {
                'title': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è –ø–µ—Ä–µ–º–æ–∂—Ü—è',
                'slug': 'winner-psychology',
                'category': 'psychology',
                'description': '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤. –†–æ–∑–≤–∏—Ç–æ–∫ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å—Ç—Ä–µ—Å–æ—Å—Ç—ñ–π–∫–æ—Å—Ç—ñ.',
                'short_description': '–†–æ–∑–≤–∏–π—Ç–µ –ø–µ—Ä–µ–º–æ–∂–Ω–∏–π –º–µ–Ω—Ç–∞–ª—ñ—Ç–µ—Ç',
                'difficulty': 'intermediate', 
                'duration_minutes': 150,
                'price': Decimal('249.00'),
                'is_published': True,
                'tags': ['–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '–º–µ–Ω—Ç–∞–ª—å–Ω—ñ—Å—Ç—å']
            },
            {
                'title': '–ê–Ω–∞–ª—ñ–∑ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤',
                'slug': 'opponent-analysis',
                'category': 'analyst',
                'description': '–ú–µ—Ç–æ–¥–∏–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–∞–Ω–¥-—Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤. –Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å–∏–ª—å–Ω—ñ —Ç–∞ —Å–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –∫–æ–º–∞–Ω–¥–∏.',
                'short_description': '–í–∏–≤—á—ñ—Ç—å —Å–ª–∞–±–∫—ñ —Ç–∞ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤', 
                'difficulty': 'advanced',
                'duration_minutes': 200,
                'price': Decimal('349.00'),
                'is_published': True,
                'tags': ['–∞–Ω–∞–ª—ñ—Ç–∏–∫', '—Ç–∞–∫—Ç–∏–∫–∞', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π']
            },
            {
                'title': '–§—ñ–∑–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥—Ä–∞–≤—Ü—ñ–≤',
                'slug': 'physical-training',
                'category': 'coach',
                'description': '–°—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ñ—ñ–∑–∏—á–Ω–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ—É—Ç–±–æ–ª—ñ—Å—Ç—ñ–≤. –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è.',
                'short_description': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Ñ—ñ–∑–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞',
                'difficulty': 'intermediate',
                'duration_minutes': 190,
                'price': Decimal('279.00'),
                'is_published': True,
                'tags': ['—Ñ—ñ–∑–∏—á–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞', '—Ç—Ä–µ–Ω–µ—Ä']
            },
            {
                'title': '–ú–µ–Ω—Ç–∞–ª—ñ—Ç–µ—Ç —á–µ–º–ø—ñ–æ–Ω–∞',
                'slug': 'champion-mindset', 
                'category': 'psychology',
                'description': '–ü—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∏—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ —Ñ—É—Ç–±–æ–ª—ñ.',
                'short_description': '–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è',
                'difficulty': 'advanced',
                'duration_minutes': 160,
                'price': Decimal('329.00'),
                'is_published': True,
                'is_featured': True,
                'tags': ['–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π']
            }
        ]
        
        for course_data in courses_data:
            if not Course.objects.filter(slug=course_data['slug']).exists():
                tags = course_data.pop('tags', [])
                category_slug = course_data.pop('category')
                
                try:
                    category = Category.objects.get(slug=category_slug)
                    course_data['category'] = category
                    
                    course = Course.objects.create(**course_data)
                    
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤
                    for tag_name in tags:
                        try:
                            tag = Tag.objects.get(name=tag_name)
                            course.tags.add(tag)
                        except Tag.DoesNotExist:
                            pass
                    
                    self.stdout.write(f'‚úÖ –ö—É—Ä—Å: {course.title}')
                except Category.DoesNotExist:
                    self.stdout.write(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {category_slug}')
    
    def create_subscription_plans(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤ –ø—ñ–¥–ø–∏—Å–æ–∫"""
        from apps.subscriptions.models import Plan
        
        plans_data = [
            {
                'name': '–ë–∞–∑–æ–≤–∏–π –º—ñ—Å—è—Ü—å',
                'slug': 'basic-month',
                'duration': '1_month',
                'duration_months': 1,
                'price': Decimal('199.00'),
                'features': ['–î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö –∫—É—Ä—Å—ñ–≤', '–§–æ—Ä—É–º —Å–ø—ñ–ª—å–Ω–æ—Ç–∏'],
                'is_popular': False
            },
            {
                'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç 3 –º—ñ—Å—è—Ü—ñ', 
                'slug': 'standard-3months',
                'duration': '3_months',
                'duration_months': 3,
                'price': Decimal('499.00'),
                'features': ['–í—Å—ñ –∫—É—Ä—Å–∏', '–Ü–≤–µ–Ω—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'],
                'is_popular': True,
                'badge_text': '–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π'
            },
            {
                'name': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä—ñ–∫',
                'slug': 'pro-year', 
                'duration': '12_months',
                'duration_months': 12,
                'price': Decimal('1599.00'),
                'features': ['–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ', '–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ —ñ–≤–µ–Ω—Ç–∏', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó'],
                'event_tickets_balance': 12,
                'discount_percentage': 20
            }
        ]
        
        for plan_data in plans_data:
            plan, created = Plan.objects.get_or_create(
                slug=plan_data['slug'],
                defaults=plan_data
            )
            if created:
                self.stdout.write(f'‚úÖ –ü–ª–∞–Ω: {plan.name}')
    
    def create_ai_config(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        from apps.ai.models import AIConfiguration, AIAccessPolicy
        
        # AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        config, created = AIConfiguration.objects.get_or_create(
            id=1,
            defaults={
                'llm_provider': 'openai',
                'llm_model': 'gpt-3.5-turbo',
                'is_enabled': True,
                'maintenance_mode': False
            }
        )
        if created:
            self.stdout.write('‚úÖ AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è')
        
        # –ü–æ–ª—ñ—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø—É AI
        policies_data = [
            {
                'level': 'guest',
                'max_response_length': 200,
                'max_queries_per_day': 3,
                'max_queries_per_hour': 1,
                'cta_message': '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –¥–æ—Å—Ç—É–ø—É'
            },
            {
                'level': 'registered', 
                'max_response_length': 500,
                'max_queries_per_day': 10,
                'max_queries_per_hour': 5,
                'include_links': True,
                'show_previews': True,
                'cta_message': '–û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π'
            },
            {
                'level': 'subscriber_l1',
                'max_response_length': 1000,
                'max_queries_per_day': 50,
                'max_queries_per_hour': 20,
                'include_links': True,
                'show_previews': True,
                'access_premium_content': True
            }
        ]
        
        for policy_data in policies_data:
            policy, created = AIAccessPolicy.objects.get_or_create(
                level=policy_data['level'],
                defaults=policy_data
            )
            if created:
                self.stdout.write(f'‚úÖ AI –ø–æ–ª—ñ—Ç–∏–∫–∞: {policy.level}')
